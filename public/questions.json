{
    "questions": [
        [{
                "id": 1,
                "type": "code",
                "question": "Write a function that returns the sum of two numbers.",
                "choices": null,
                "correctAnswer": "function sum(a, b) {\n  return a + b;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 2,
                "type": "open-ended",
                "question": "Explain the concept of object-oriented programming.",
                "choices": null,
                "correctAnswer": "Object-oriented programming is a programming paradigm based on the concept of 'objects', which can contain data and code.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 3,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof null);",
                "choices": [
                    "null",
                    "object",
                    "undefined",
                    "string"
                ],
                "correctAnswer": "object",
                "explanation": null,
                "flag": null
            },
            {
                "id": 4,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns the largest number.",
                "choices": null,
                "correctAnswer": "function findMax(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 5,
                "type": "open-ended",
                "question": "Explain the difference between let, const, and var in JavaScript.",
                "choices": null,
                "correctAnswer": "let and const are block-scoped, while var is function-scoped. const variables cannot be reassigned, while let and var variables can be reassigned.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 6,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(3 + '3');",
                "choices": [
                    "6",
                    "33",
                    "63",
                    "Error"
                ],
                "correctAnswer": "33",
                "explanation": null,
                "flag": null
            },
            {
                "id": 7,
                "type": "code",
                "question": "Write a function that takes a string and returns the reverse of that string.",
                "choices": null,
                "correctAnswer": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 8,
                "type": "open-ended",
                "question": "Explain the difference between synchronous and asynchronous code in JavaScript.",
                "choices": null,
                "correctAnswer": "Synchronous code is executed in a single thread, one operation at a time. Asynchronous code allows for non-blocking operations, where the program can continue running while waiting for an operation to complete.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 9,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof NaN);",
                "choices": [
                    "number",
                    "NaN",
                    "undefined",
                    "string"
                ],
                "correctAnswer": "number",
                "explanation": null,
                "flag": null
            },
            {
                "id": 10,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns the sum of all even numbers in the array.",
                "choices": null,
                "correctAnswer": "function sumEvenNumbers(arr) {\n  return arr.filter(num => num % 2 === 0).reduce((sum, num) => sum + num, 0);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 11,
                "type": "open-ended",
                "question": "Explain the difference between the spread operator (...) and the rest parameter syntax (...) in JavaScript.",
                "choices": null,
                "correctAnswer": "The spread operator is used to spread the elements of an iterable into individual elements, while the rest parameter syntax is used to collect multiple values into a single array parameter in a function definition.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 12,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(false == '0');",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 13,
                "type": "code",
                "question": "Write a function that takes a string and returns true if the string is a palindrome, and false otherwise.",
                "choices": null,
                "correctAnswer": "function isPalindrome(str) {\n  const reversed = str.split('').reverse().join('');\n  return str === reversed;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 14,
                "type": "open-ended",
                "question": "Explain the difference between the call, apply, and bind methods in JavaScript.",
                "choices": null,
                "correctAnswer": "call and apply are used to invoke a function with a specific 'this' value. Call takes individual arguments, apply takes an array of arguments. Bind returns a new function with a specific 'this' value.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 15,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(1 + '2' + '2');",
                "choices": [
                    "122",
                    "32",
                    "5",
                    "Error"
                ],
                "correctAnswer": "122",
                "explanation": null,
                "flag": null
            },
            {
                "id": 16,
                "type": "code",
                "question": "Write a function that takes an array of objects and returns a new array with only the unique objects based on a specific property.",
                "choices": null,
                "correctAnswer": "function getUniqueObjects(arr, prop) {\n  const seen = new Set();\n  return arr.filter(obj => {\n    const val = obj[prop];\n    if (seen.has(val)) return false;\n    seen.add(val);\n    return true;\n  });\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 17,
                "type": "open-ended",
                "question": "Explain the difference between the forEach and map methods in JavaScript.",
                "choices": null,
                "correctAnswer": "forEach is used to iterate over an array and perform an operation on each element, while map creates a new array by applying a function to each element of the original array.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 18,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(undefined == null);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 19,
                "type": "code",
                "question": "Write a function that takes a string and returns the number of occurrences of a specific character in that string.",
                "choices": null,
                "correctAnswer": "function countCharOccurrences(str, char) {\n  return str.split('').filter(c => c === char).length;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 20,
                "type": "open-ended",
                "question": "Explain the difference between the slice and splice methods in JavaScript.",
                "choices": null,
                "correctAnswer": "slice creates a new array by copying a portion of an existing array, while splice modifies the original array by adding, removing, or replacing elements.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 21,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 + 2 * 2);",
                "choices": [
                    "4",
                    "6",
                    "8",
                    "Error"
                ],
                "correctAnswer": "6",
                "explanation": null,
                "flag": null
            },
            {
                "id": 22,
                "type": "code",
                "question": "Write a function that takes an array of objects and returns a new array with only the objects that have a specific property value.",
                "choices": null,
                "correctAnswer": "function filterObjectsByProp(arr, prop, value) {\n  return arr.filter(obj => obj[prop] === value);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 23,
                "type": "open-ended",
                "question": "Explain the difference between the arrow function syntax and the traditional function syntax in JavaScript.",
                "choices": null,
                "correctAnswer": "Arrow functions are a more concise syntax for writing function expressions, and they inherit the this value from the enclosing scope, while traditional functions have their own this value determined by how they are called.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 24,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(true + true + '2');",
                "choices": [
                    "22",
                    "4",
                    "true2",
                    "Error"
                ],
                "correctAnswer": "22",
                "explanation": null,
                "flag": null
            },
            {
                "id": 25,
                "type": "code",
                "question": "Write a function that takes a string and returns the number of words in that string.",
                "choices": null,
                "correctAnswer": "function countWords(str) {\n  return str.trim().split(/\\s+/).length;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 26,
                "type": "open-ended",
                "question": "Explain the difference between the Array.from and Array.of methods in JavaScript.",
                "choices": null,
                "correctAnswer": "Array.from creates a new array from an array-like or iterable object, while Array.of creates a new array with the provided arguments as its elements.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 27,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 ** 3);",
                "choices": [
                    "6",
                    "8",
                    "9",
                    "Error"
                ],
                "correctAnswer": "8",
                "explanation": null,
                "flag": null
            },
            {
                "id": 28,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns the second largest number.",
                "choices": null,
                "correctAnswer": "function findSecondLargest(arr) {\n  let max = -Infinity, secondMax = -Infinity;\n  for (const num of arr) {\n    if (num > max) {\n      secondMax = max;\n      max = num;\n    } else if (num > secondMax && num !== max) {\n      secondMax = num;\n    }\n  }\n  return secondMax;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 29,
                "type": "open-ended",
                "question": "Explain the difference between the for...in and for...of loops in JavaScript.",
                "choices": null,
                "correctAnswer": "The for...in loop iterates over the enumerable properties of an object, while the for...of loop iterates over the values of an iterable object, such as an array or string.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 30,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(1 + -'1' + 2);",
                "choices": [
                    "2",
                    "0",
                    "12",
                    "Error"
                ],
                "correctAnswer": "2",
                "explanation": null,
                "flag": null
            },
            {
                "id": 31,
                "type": "code",
                "question": "Write a function that takes a string and returns the first non-repeated character in that string.",
                "choices": null,
                "correctAnswer": "function firstNonRepeatedChar(str) {\n  for (const char of str) {\n    if (str.indexOf(char) === str.lastIndexOf(char)) {\n      return char;\n    }\n  }\n  return null;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 32,
                "type": "open-ended",
                "question": "Explain the difference between the Promise.all and Promise.race methods in JavaScript.",
                "choices": null,
                "correctAnswer": "Promise.all waits for all promises in an array to resolve and returns an array of their resolved values, while Promise.race returns the value of the first promise that resolves or rejects.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 33,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 > 1 || 2 < 1);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 34,
                "type": "code",
                "question": "Write a function that takes an array of objects and returns a new object with the count of each property value.",
                "choices": null,
                "correctAnswer": "function countPropertyValues(arr, prop) {\n  const counts = {};\n  for (const obj of arr) {\n    const val = obj[prop];\n    counts[val] = (counts[val] || 0) + 1;\n  }\n  return counts;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 35,
                "type": "open-ended",
                "question": "Explain the difference between the async/await syntax and traditional callback functions in JavaScript.",
                "choices": null,
                "correctAnswer": "async/await is a more modern and readable way to handle asynchronous code, allowing you to write asynchronous code that looks and behaves more like synchronous code, while callbacks are the traditional way of handling asynchronous operations, but can lead to callback hell and harder-to-read code.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 36,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 && 3);",
                "choices": [
                    "2",
                    "3",
                    "true",
                    "false"
                ],
                "correctAnswer": "3",
                "explanation": null,
                "flag": null
            },
            {
                "id": 37,
                "type": "code",
                "question": "Write a function that takes a string and returns the longest substring without repeating characters.",
                "choices": null,
                "correctAnswer": "function longestSubstringWithoutRepeats(str) {\n  let longest = '';\n  let seen = new Set();\n  let start = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!seen.has(char)) {\n      seen.add(char);\n      longest = longest.length > seen.size ? longest : str.slice(start, i + 1);\n    } else {\n      while (str[start] !== char) {\n        seen.delete(str[start]);\n        start++;\n      }\n      start++;\n      seen.clear();\n    }\n  }\n  return longest;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 38,
                "type": "open-ended",
                "question": "Explain the difference between the map, filter, and reduce methods in JavaScript.",
                "choices": null,
                "correctAnswer": "map creates a new array by applying a function to each element, filter creates a new array with elements that pass a test, and reduce applies a function against an accumulator to reduce an array to a single value.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 39,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 + '2' + 2);",
                "choices": [
                    "42",
                    "222",
                    "24",
                    "22"
                ],
                "correctAnswer": "222",
                "explanation": null,
                "flag": null
            },
            {
                "id": 40,
                "type": "code",
                "question": "Write a function that takes an array of strings and returns a new array with only the unique strings.",
                "choices": null,
                "correctAnswer": "function getUniqueStrings(arr) {\n  return [...new Set(arr)];\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 41,
                "type": "open-ended",
                "question": "Explain the difference between the == and === operators in JavaScript.",
                "choices": null,
                "correctAnswer": "The == operator performs type coercion before comparison, while the === operator does not perform type coercion and compares both value and type.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 42,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(true + true);",
                "choices": [
                    "2",
                    "true",
                    "false",
                    "Error"
                ],
                "correctAnswer": "2",
                "explanation": null,
                "flag": null
            },
            {
                "id": 43,
                "type": "code",
                "question": "Write a function that takes a string and returns the number of vowels in that string.",
                "choices": null,
                "correctAnswer": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return str.split('').filter(char => vowels.includes(char.toLowerCase())).length;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 44,
                "type": "open-ended",
                "question": "Explain the difference between the Array.prototype.concat and Array.prototype.push methods in JavaScript.",
                "choices": null,
                "correctAnswer": "concat creates a new array by merging two or more arrays, while push adds one or more elements to the end of an existing array and returns the new length of the array.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 45,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 * '2');",
                "choices": [
                    "4",
                    "22",
                    "NaN",
                    "Error"
                ],
                "correctAnswer": "4",
                "explanation": null,
                "flag": null
            },
            {
                "id": 46,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns the second smallest number.",
                "choices": null,
                "correctAnswer": "function findSecondSmallest(arr) {\n  let min = Infinity, secondMin = Infinity;\n  for (const num of arr) {\n    if (num < min) {\n      secondMin = min;\n      min = num;\n    } else if (num < secondMin && num !== min) {\n      secondMin = num;\n    }\n  }\n  return secondMin === Infinity ? null : secondMin;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 47,
                "type": "open-ended",
                "question": "Explain the concept of closures in JavaScript.",
                "choices": null,
                "correctAnswer": "Closures are functions that have access to variables in their outer (enclosing) lexical scope, even after the outer function has returned.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 48,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof []);",
                "choices": [
                    "array",
                    "object",
                    "undefined",
                    "null"
                ],
                "correctAnswer": "object",
                "explanation": null,
                "flag": null
            },
            {
                "id": 49,
                "type": "code",
                "question": "Write a function that removes duplicates from an array.",
                "choices": null,
                "correctAnswer": "function removeDuplicates(arr) {\n  return [...new Set(arr)];\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 50,
                "type": "open-ended",
                "question": "Explain the difference between null and undefined in JavaScript.",
                "choices": null,
                "correctAnswer": "undefined represents a variable that has been declared but not assigned a value, while null is an intentional absence of any object value.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 51,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log('5' - 3);",
                "choices": [
                    "2",
                    "53",
                    "NaN",
                    "Error"
                ],
                "correctAnswer": "2",
                "explanation": null,
                "flag": null
            },
            {
                "id": 52,
                "type": "code",
                "question": "Write a function that checks if a string is a valid email address.",
                "choices": null,
                "correctAnswer": "function isValidEmail(email) {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 53,
                "type": "open-ended",
                "question": "Explain the concept of hoisting in JavaScript.",
                "choices": null,
                "correctAnswer": "Hoisting is JavaScript's default behavior of moving declarations to the top of their respective scopes during compilation, before code execution.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 54,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(0.1 + 0.2 === 0.3);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "false",
                "explanation": null,
                "flag": null
            },
            {
                "id": 55,
                "type": "code",
                "question": "Write a function that finds the intersection of two arrays.",
                "choices": null,
                "correctAnswer": "function intersection(arr1, arr2) {\n  const set1 = new Set(arr1);\n  return arr2.filter(item => set1.has(item));\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 56,
                "type": "open-ended",
                "question": "Explain the difference between localStorage and sessionStorage.",
                "choices": null,
                "correctAnswer": "localStorage persists data even when the browser is closed and reopened, while sessionStorage is cleared when the page session ends.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 57,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log('b' + 'a' + + 'a' + 'a');",
                "choices": [
                    "baaaa",
                    "baNaNa",
                    "baa",
                    "Error"
                ],
                "correctAnswer": "baNaNa",
                "explanation": null,
                "flag": null
            },
            {
                "id": 58,
                "type": "code",
                "question": "Write a function that implements the bubble sort algorithm.",
                "choices": null,
                "correctAnswer": "function bubbleSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n    }\n  }\n  return arr;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 59,
                "type": "open-ended",
                "question": "Explain the concept of event bubbling in JavaScript.",
                "choices": null,
                "correctAnswer": "Event bubbling is the process where an event triggers on the deepest target element, then propagates up through its ancestor elements in the DOM tree.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 60,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log([] == ![]);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 61,
                "type": "code",
                "question": "Write a function that implements the binary search algorithm.",
                "choices": null,
                "correctAnswer": "function binarySearch(arr, target) {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === target) return mid;\n    if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n  }\n  return -1;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 62,
                "type": "open-ended",
                "question": "Explain the difference between shallow copy and deep copy in JavaScript.",
                "choices": null,
                "correctAnswer": "A shallow copy creates a new object with references to the same nested objects as the original, while a deep copy creates a new object with new copies of all nested objects.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 63,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(parseInt('0.1'));",
                "choices": [
                    "0.1",
                    "0",
                    "1",
                    "NaN"
                ],
                "correctAnswer": "0",
                "explanation": null,
                "flag": null
            },
            {
                "id": 64,
                "type": "code",
                "question": "Write a function that implements the quicksort algorithm.",
                "choices": null,
                "correctAnswer": "function quickSort(arr) {\n  if (arr.length <= 1) return arr;\n  const pivot = arr[Math.floor(arr.length / 2)];\n  const left = arr.filter(x => x < pivot);\n  const middle = arr.filter(x => x === pivot);\n  const right = arr.filter(x => x > pivot);\n  return [...quickSort(left), ...middle, ...quickSort(right)];\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 65,
                "type": "open-ended",
                "question": "Explain the concept of prototypal inheritance in JavaScript.",
                "choices": null,
                "correctAnswer": "Prototypal inheritance is a method by which an object can inherit properties and methods from another object via the prototype chain.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 66,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof typeof 1);",
                "choices": [
                    "number",
                    "string",
                    "undefined",
                    "object"
                ],
                "correctAnswer": "string",
                "explanation": null,
                "flag": null
            },
            {
                "id": 67,
                "type": "code",
                "question": "Write a function that checks if two strings are anagrams.",
                "choices": null,
                "correctAnswer": "function areAnagrams(str1, str2) {\n  return str1.split('').sort().join('') === str2.split('').sort().join('');\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 68,
                "type": "open-ended",
                "question": "Explain the difference between synchronous and asynchronous programming in JavaScript.",
                "choices": null,
                "correctAnswer": "Synchronous programming executes code sequentially, blocking until each operation completes, while asynchronous programming allows operations to run in the background without blocking the main thread.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 69,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(1 < 2 < 3);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 70,
                "type": "code",
                "question": "Write a function that implements a basic debounce mechanism.",
                "choices": null,
                "correctAnswer": "function debounce(func, delay) {\n  let timeoutId;\n  return function(...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\n  };\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 71,
                "type": "open-ended",
                "question": "Explain the concept of currying in JavaScript.",
                "choices": null,
                "correctAnswer": "Currying is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 72,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(3 > 2 > 1);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "false",
                "explanation": null,
                "flag": null
            },
            {
                "id": 73,
                "type": "code",
                "question": "Write a function that returns the sum of two numbers.",
                "choices": null,
                "correctAnswer": "function sum(a, b) {\n  return a + b;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 74,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns a new array with each number doubled.",
                "choices": null,
                "correctAnswer": "function doubleArray(arr) {\n  return arr.map(num => num * 2);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 75,
                "type": "open-ended",
                "question": "Explain the difference between let, const, and var in JavaScript.",
                "choices": null,
                "correctAnswer": "var is function-scoped and can be re-declared, while let and const are block-scoped. const cannot be reassigned, but let can.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 76,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(3 + '3');",
                "choices": [
                    "6",
                    "33",
                    "63",
                    "Error"
                ],
                "correctAnswer": "33",
                "explanation": null,
                "flag": null
            },
            {
                "id": 77,
                "type": "code",
                "question": "Write a function that takes an array of strings and returns the first string that starts with the letter 'A'.",
                "choices": null,
                "correctAnswer": "function findA(arr) {\n  return arr.find(str => str.startsWith('A'));\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 78,
                "type": "open-ended",
                "question": "Explain the concept of object-oriented programming.",
                "choices": null,
                "correctAnswer": "Object-oriented programming is a paradigm where data and methods are encapsulated within objects.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 79,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof null);",
                "choices": [
                    "null",
                    "object",
                    "undefined",
                    "string"
                ],
                "correctAnswer": "object",
                "explanation": null,
                "flag": null
            },
            {
                "id": 80,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns the largest number.",
                "choices": null,
                "correctAnswer": "function findMax(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 81,
                "type": "open-ended",
                "question": "Explain the difference between synchronous and asynchronous code in JavaScript.",
                "choices": null,
                "correctAnswer": "Synchronous code runs sequentially, blocking further execution until the current task is completed, while asynchronous code allows the next task to start before the previous one finishes.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 82,
                "type": "multiple-choice",
                "question": "What is the purpose of React.Fragment?",
                "choices": [
                    "To bundle multiple components into a single export",
                    "To render multiple components or elements without adding an extra node to the DOM",
                    "To manage global state",
                    "To handle side effects"
                ],
                "correctAnswer": "To render multiple components or elements without adding an extra node to the DOM",
                "explanation": null,
                "flag": null
            },
            {
                "id": 83,
                "type": "code",
                "question": "Write a React component that takes props with name and age and displays them.",
                "choices": null,
                "correctAnswer": "function UserInfo({ name, age }) {\n  return (\n    <div>\n      <p>Name: {name}</p>\n      <p>Age: {age}</p>\n    </div>\n  );\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 84,
                "type": "open-ended",
                "question": "What is the purpose of the useEffect hook in React?",
                "choices": null,
                "correctAnswer": "useEffect is used to handle side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 85,
                "type": "multiple-choice",
                "question": "What is the difference between a controlled and uncontrolled component in React?",
                "choices": [
                    "A controlled component has its value managed by React state, while an uncontrolled component relies on the DOM for its value.",
                    "A controlled component cannot change its state after initialization.",
                    "An uncontrolled component manages its own lifecycle.",
                    "Controlled components use the componentDidMount lifecycle method."
                ],
                "correctAnswer": "A controlled component has its value managed by React state, while an uncontrolled component relies on the DOM for its value.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 86,
                "type": "code",
                "question": "Write a function that takes a string and returns the reverse of that string.",
                "choices": null,
                "correctAnswer": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 87,
                "type": "open-ended",
                "question": "Explain the difference between state and props in React.",
                "choices": null,
                "correctAnswer": "Props are read-only inputs to components, passed down from parent to child, while state is managed internally by the component and can change over time.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 88,
                "type": "multiple-choice",
                "question": "Which lifecycle method is invoked immediately after a component is added to the DOM?",
                "choices": [
                    "componentDidUpdate",
                    "componentWillUnmount",
                    "componentDidMount",
                    "getDerivedStateFromProps"
                ],
                "correctAnswer": "componentDidMount",
                "explanation": null,
                "flag": null
            },
            {
                "id": 89,
                "type": "code",
                "question": "Write a function that takes two arrays and returns an array of their common elements.",
                "choices": null,
                "correctAnswer": "function commonElements(arr1, arr2) {\n  return arr1.filter(item => arr2.includes(item));\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 90,
                "type": "open-ended",
                "question": "What is the Virtual DOM in React and how does it improve performance?",
                "choices": null,
                "correctAnswer": "The Virtual DOM is an in-memory representation of the actual DOM. It improves performance by allowing React to batch updates and make minimal changes to the real DOM.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 91,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log([1, 2, 3] instanceof Array);",
                "choices": [
                    "true",
                    "false",
                    "undefined",
                    "Error"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 92,
                "type": "code",
                "question": "Write a React component that increments a counter by 1 when a button is clicked.",
                "choices": null,
                "correctAnswer": "function Counter() {\n  const [count, setCount] = React.useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 93,
                "type": "open-ended",
                "question": "Explain the purpose of Redux in a React application.",
                "choices": null,
                "correctAnswer": "Redux is a state management library used in React applications to manage global state in a predictable manner through actions, reducers, and a central store.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 94,
                "type": "multiple-choice",
                "question": "What is the purpose of the key prop in a list of React elements?",
                "choices": [
                    "To uniquely identify each element for DOM updates",
                    "To apply CSS styles to list elements",
                    "To pass data between list elements",
                    "To manage local component state"
                ],
                "correctAnswer": "To uniquely identify each element for DOM updates",
                "explanation": null,
                "flag": null
            },
            {
                "id": 95,
                "type": "code",
                "question": "Write a function that takes two numbers and returns true if their sum is greater than 10.",
                "choices": null,
                "correctAnswer": "function isSumGreaterThanTen(a, b) {\n  return (a + b) > 10;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 96,
                "type": "open-ended",
                "question": "What is the difference between synchronous and asynchronous code?",
                "choices": null,
                "correctAnswer": "Synchronous code executes line by line, blocking further execution until the current task is finished, while asynchronous code allows other operations to proceed while waiting for a task to complete.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 97,
                "type": "multiple-choice",
                "question": "What does the useState hook return in React?",
                "choices": [
                    "A function to update the state",
                    "An array with the current state and a function to update it",
                    "A boolean value indicating if the component is mounted",
                    "A promise that resolves when the state is updated"
                ],
                "correctAnswer": "An array with the current state and a function to update it",
                "explanation": null,
                "flag": null
            },
            {
                "id": 98,
                "type": "code",
                "question": "Write a function that removes duplicates from an array.",
                "choices": null,
                "correctAnswer": "function removeDuplicates(arr) {\n  return [...new Set(arr)];\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 99,
                "type": "open-ended",
                "question": "What is the role of the componentDidMount lifecycle method in React?",
                "choices": null,
                "correctAnswer": "componentDidMount is called after a component is rendered to the DOM and is commonly used for tasks like data fetching or DOM manipulation.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 100,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log([] + []);",
                "choices": [
                    "0",
                    "undefined",
                    "'' (empty string)",
                    "Error"
                ],
                "correctAnswer": "'' (empty string)",
                "explanation": null,
                "flag": null
            },
            {
                "id": 101,
                "type": "code",
                "question": "Write a function that takes an array of numbers and returns the sum of all numbers.",
                "choices": null,
                "correctAnswer": "function sumArray(arr) {\n  return arr.reduce((sum, num) => sum + num, 0);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 102,
                "type": "open-ended",
                "question": "What is the difference between props and state in React?",
                "choices": null,
                "correctAnswer": "Props are inputs passed to components from parent components, while state is managed internally by the component and can change over time.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 103,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(2 * '2');",
                "choices": [
                    "4",
                    "22",
                    "NaN",
                    "Error"
                ],
                "correctAnswer": "4",
                "explanation": null,
                "flag": null
            },
            {
                "id": 104,
                "type": "open-ended",
                "question": "Explain the difference between localStorage and sessionStorage.",
                "choices": null,
                "correctAnswer": "localStorage persists data even when the browser is closed, while sessionStorage is cleared when the page session ends.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 105,
                "type": "code",
                "question": "Write a function that returns true if the given string is a palindrome.",
                "choices": null,
                "correctAnswer": "function isPalindrome(str) {\n  const reversed = str.split('').reverse().join('');\n  return str === reversed;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 106,
                "type": "open-ended",
                "question": "Explain the difference between '==' and '===' in JavaScript.",
                "choices": null,
                "correctAnswer": "'==' compares values after type conversion, while '===' compares both value and type without conversion.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 107,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(null == undefined);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 108,
                "type": "code",
                "question": "Write a function that returns the largest number from an array of numbers.",
                "choices": null,
                "correctAnswer": "function largestNumber(arr) {\n  return Math.max(...arr);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 109,
                "type": "open-ended",
                "question": "Explain the purpose of the 'this' keyword in JavaScript.",
                "choices": null,
                "correctAnswer": "The 'this' keyword refers to the object that is executing the current function.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 110,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(1 + '1');",
                "choices": [
                    "2",
                    "11",
                    "undefined",
                    "Error"
                ],
                "correctAnswer": "11",
                "explanation": null,
                "flag": null
            },
            {
                "id": 111,
                "type": "code",
                "question": "Write a function that takes an array and returns only the even numbers.",
                "choices": null,
                "correctAnswer": "function getEvenNumbers(arr) {\n  return arr.filter(num => num % 2 === 0);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 112,
                "type": "open-ended",
                "question": "What is the difference between call() and apply() in JavaScript?",
                "choices": null,
                "correctAnswer": "Both are used to invoke a function with a specified 'this' value, but call() accepts arguments individually, while apply() accepts them as an array.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 113,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof NaN);",
                "choices": [
                    "number",
                    "NaN",
                    "undefined",
                    "string"
                ],
                "correctAnswer": "number",
                "explanation": null,
                "flag": null
            },
            {
                "id": 114,
                "type": "code",
                "question": "Write a function that takes a string and returns the character that appears the most.",
                "choices": null,
                "correctAnswer": "function mostFrequentChar(str) {\n  const freq = {};\n  let maxChar = '';\n  let maxCount = 0;\n  for (const char of str) {\n    freq[char] = (freq[char] || 0) + 1;\n    if (freq[char] > maxCount) {\n      maxChar = char;\n      maxCount = freq[char];\n    }\n  }\n  return maxChar;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 115,
                "type": "open-ended",
                "question": "What is event delegation in JavaScript?",
                "choices": null,
                "correctAnswer": "Event delegation is a technique where a single event listener is attached to a parent element to manage events from its child elements.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 116,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log([1, 2, 3] + [4, 5, 6]);",
                "choices": [
                    "1,2,34,5,6",
                    "123456",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "1,2,34,5,6",
                "explanation": null,
                "flag": null
            },
            {
                "id": 117,
                "type": "code",
                "question": "Write a function that returns the factorial of a given number.",
                "choices": null,
                "correctAnswer": "function factorial(n) {\n  if (n === 0 || n === 1) return 1;\n  return n * factorial(n - 1);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 118,
                "type": "open-ended",
                "question": "What is the difference between document.getElementById and document.querySelector?",
                "choices": null,
                "correctAnswer": "getElementById selects elements by their ID, while querySelector selects elements based on any CSS selector.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 119,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof undefined);",
                "choices": [
                    "undefined",
                    "object",
                    "null",
                    "string"
                ],
                "correctAnswer": "undefined",
                "explanation": null,
                "flag": null
            },
            {
                "id": 120,
                "type": "code",
                "question": "Write a function that flattens a nested array.",
                "choices": null,
                "correctAnswer": "function flatten(arr) {\n  return arr.reduce((flat, toFlatten) => flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten), []);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 121,
                "type": "open-ended",
                "question": "Explain what closures are in JavaScript.",
                "choices": null,
                "correctAnswer": "Closures are functions that retain access to variables from their outer scope, even after the outer function has returned.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 122,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof function(){});",
                "choices": [
                    "function",
                    "object",
                    "undefined",
                    "string"
                ],
                "correctAnswer": "function",
                "explanation": null,
                "flag": null
            },
            {
                "id": 123,
                "type": "code",
                "question": "Write a function that checks if two arrays are equal.",
                "choices": null,
                "correctAnswer": "function arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n  return arr1.every((val, index) => val === arr2[index]);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 124,
                "type": "open-ended",
                "question": "What is the difference between a shallow copy and a deep copy in JavaScript?",
                "choices": null,
                "correctAnswer": "A shallow copy copies an object’s top-level properties, while a deep copy duplicates all nested objects.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 125,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(0 == false);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 126,
                "type": "code",
                "question": "Write a function that generates a random number between two given numbers.",
                "choices": null,
                "correctAnswer": "function randomBetween(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 127,
                "type": "open-ended",
                "question": "What are promises in JavaScript?",
                "choices": null,
                "correctAnswer": "Promises are objects representing the eventual completion or failure of an asynchronous operation.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 128,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(typeof '');",
                "choices": [
                    "string",
                    "object",
                    "undefined",
                    "null"
                ],
                "correctAnswer": "string",
                "explanation": null,
                "flag": null
            },
            {
                "id": 129,
                "type": "code",
                "question": "Write a function that merges two sorted arrays into one sorted array.",
                "choices": null,
                "correctAnswer": "function mergeSortedArrays(arr1, arr2) {\n  let result = [], i = 0, j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      result.push(arr1[i++]);\n    } else {\n      result.push(arr2[j++]);\n    }\n  }\n  return result.concat(arr1.slice(i)).concat(arr2.slice(j));\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 130,
                "type": "open-ended",
                "question": "What is a callback function in JavaScript?",
                "choices": null,
                "correctAnswer": "A callback function is a function passed as an argument to another function, to be executed after the first function has completed.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 131,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log([] == false);",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 132,
                "type": "code",
                "question": "Write a function that calculates the greatest common divisor (GCD) of two numbers.",
                "choices": null,
                "correctAnswer": "function gcd(a, b) {\n  return b === 0 ? a : gcd(b, a % b);\n}",
                "explanation": null,
                "flag": null
            },
            {
                "id": 133,
                "type": "open-ended",
                "question": "What is the purpose of the async/await syntax in JavaScript?",
                "choices": null,
                "correctAnswer": "async/await simplifies the handling of promises by allowing asynchronous code to be written as if it were synchronous.",
                "explanation": null,
                "flag": null
            },
            {
                "id": 134,
                "type": "multiple-choice",
                "question": "What is the output of the following code?\n\nconsole.log(1 == '1');",
                "choices": [
                    "true",
                    "false",
                    "Error",
                    "undefined"
                ],
                "correctAnswer": "true",
                "explanation": null,
                "flag": null
            },
            {
                "id": 135,
                "type": "code",
                "question": "Write a function that takes a string and returns it with the first letter of each word capitalized.",
                "choices": null,
                "correctAnswer": "function capitalizeWords(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}",
                "explanation": null,
                "flag": null
            }
        ]
    ]
}